Started On: November 30th, 2008 by Peter Epp

TODO List for Version 2.0

	Major Refactoring:

DONE	1.	Get rid of the concept of "plugins", and split existing plugins into 2 groups:

			a.	Modules - Components that integrate directly with the framework and are responsible for processing requests and rendering output or returning
				other responses when applicable.  Examples would be News and Events, the Photo Gallery or the Calendar.

			b.	Extensions - Components that can either stand alone or integrate directly with the framework, and provide helper functionality.  Extensions
				could be required by modules and used to assist in processing requests and providing information for the response, but would never directly
				process or respond to requests. Examples would be any "plugins" that just register JS and/or CSS files, or libraries like HTML Purifier
				and PHPMailer.

DONE	2.	Write a good migration system - not bad so far, but not great. When "?run_migrations=1" is provided in the query string it will run all migrations
			that haven't been ran before, and record the last one it ran in a DB table.  Would like to program a page with an iframe that lists all migrations
			not yet run and runs them in the iframe - either one at a time, or all of them in order.

DONE	3.	Move the responsibility of dealing with uploads and all related functionality from the controllers to the models

DONE	4.	Make configuration for different hosts work like they do in Drupal, where each "site" has it's own config folder.

DONE	5.	Add an installation and configuration check on startup.  This would ensure that everything is setup correctly so the framework can run and redirect
		 	to a pretty error page with a list of the problems.  The check would perform the following tasks:

			a.	Check that all the minimum required system constants exist and throw a server error if any are missing. Simultaneously ensure that all minimum
				required constants are stored in the site configuration file, not in the database.
    	
			b.	Check for the existence and writability of all folders that the framework and any models need to write to and create them if needed. Utilize
				event listener system to allow each module to provide a list of the folders it needs.
    	
			c.	Check DB table installation for all modules on startup and create any if needed before processing the request.

DONE	6.	Make modules and extensions entirely self-contained for improved portability.  A module or extension folder would contain all controllers, models,
			templates, views, scripts and css files needed by the component.  Current plugins don't currently include their own templates, but that could come
			in handy in future.

DONE	7.	Update DB class to use PDO

DONE	8.	Update to use self-contained themes.

DONE	9.	Add caching optimization by utilizing existing HTTP standards to control proxy and client-side caches, as well as using 304 headers when content
			is unchanged.

	Usability Improvements:

		1.	Authenticator

			Add Javascript login idle time monitoring that prompts the user to enter their password to extend their login session when their remaining
			time runs low.

DONE	2.	Form Handling

			a.	Update Ajax form validation to use HTTP status codes and JSON responses

			b.	Setup form helpers for easily rendering fields with the right hooks to allow for hilighting of invalid ones when Ajax validation fails, as well
				as hilighting them when the form loads for non-ajax validation.

				Note: FormField class needs further testing to ensure that it functions as expected in all cases, and to ensure that edge cases are taken into account

TODO List for Version 3.0

	Major Refactoring:

		1.	Add a top-level CMS interface for managing the site in every aspect from adding and removing pages, installing and removing modules and extensions,
			assigning modules to process different pages, etc.

		2.	Along with the above, figure out how to incorporate a concept of "content containers" that makes it easy to assign content from modules to
			containers in a template via a CMS.

		3.	Add multi-lingual support

	Usability Improvements:
	
		1.	Add a first-time installation and configuration script for new sites with a slick GUI.

	Module Updates:

		1.	Page Content Manager - make it a part of the top-level CMS system and update it to include the following new features:

			a.	Version content when saving, so "working copies" can be "committed" as revisions, with a timestamp and author name attached, and allow for
				the following saving/publishing options:

				i.		Save Working Copy - each user would effectively have their own working copies "folder".  Working copies would be owned by one user and
						not shared with others until committed.

				ii.		Commit

				iii.	Publish - only available after committing.

				iv.		Commit and Publish - guess what that would do!

				Checking out a working copy would simply be a matter of choosing to edit any page at any particular revision.  A working copy would only be
				saved if the user chooses to.

			c.	Optionally have "author" and "approver" user levels for more granular control of the publishing process.  If you only want one user level,
				grant everyone "approver" level permissions.

			With this a basic user-management core module would need to be added for admin use, accessible from the top-level CMS.
